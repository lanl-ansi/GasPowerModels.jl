var documenterSearchIndex = {"docs":
[{"location":"math-model/#The-GasPowerModels-Mathematical-Model","page":"Mathematical Model","title":"The GasPowerModels Mathematical Model","text":"","category":"section"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"As GasPowerModels implements a variety of coupled gas grid network optimization problems, the implementation is the best reference for precise mathematical formulations. This section provides a mathematical specification for constraints and physics that couple electric power and natural gas and provides an overview of the typical mathematical models in GasPowerModels.","category":"page"},{"location":"math-model/#Coupled-Gas-and-Electric-Power-Flow","page":"Mathematical Model","title":"Coupled Gas and Electric Power Flow","text":"","category":"section"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"GasPowerModels implements steady state models of gas flow and power flow, based on the implementations of gas flows in GasModels.jl and power flows in PowerModels.jl. The key coupling constraint between power and gas systems is through generators that consume gas to produce power. This is expressed in terms of a heat rate curve, i.e.,","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"f = e rho sum_i in Gamma (h^0_i * pg_i^2 + h^1_i * pg_i + h^2_i)","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"where h_i are coefficients of a quadratic function used to convert MW (pg_i) at a generator into Joules consumed per second. Note that h_i coefficients are in units of (J/MW^2, J/MW, J). This is then converted to mass flow, f, (kg/s) of gas consumed at a delivery point to produce this energy. Here, e is an energy factor (m^3/J) and rho is the gas standard density (kg/m^3).","category":"page"},{"location":"math-model/#Co-optimization-of-Natural-Gas-and-Electric-Power","page":"Mathematical Model","title":"Co-optimization of Natural Gas and Electric Power","text":"","category":"section"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"One of the largest challenges associated with modeling coupled natural gas and electric power systems is defining objective functions that span both systems. Each system has its own units, both in terms of actual quantities and methods for nondimensionalizing the equations to improve numerical performance. Further, the importance of optimizing the gas system relative to the electric power system may be problem specific. Thus, the native implementations of GasPowerModels support the ability to model a wide variety of components of a joint objective function and define weights on each component. Each component of the objective function is defined in the space of nondimensionalized units, and these weighting constants can be used to (sometimes) transform the quantities into their real units.","category":"page"},{"location":"math-model/#Expansion-costs-of-electric-power-components","page":"Mathematical Model","title":"Expansion costs of electric power components","text":"","category":"section"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"Some gas grid problems include network expansions on electric power lines. Objective functions which model the cost of electric power lines minimize a function of the form","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":" sum_a in A^e kappa_a z_a","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"where A^e is the set of new electric power lines, kappa_a is the cost of installing a, and z_a is the binary variable for installing a. The constant term power_ne_weight can be provided as a parameter to weight this cost in an objective function. The units of this term are dollars.","category":"page"},{"location":"math-model/#Expansion-costs-of-natural-gas-components","page":"Mathematical Model","title":"Expansion costs of natural gas components","text":"","category":"section"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"Some gas grid problems include network expansions on compressors and pipes. Objective functions which model the costs of compressors and pipes minimize a function of the form","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":" sum_a in A^g kappa_a z_a","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"where A^g is the set of new pipes and compressors, kappa_a is the cost of installing a, and z_a is the binary variable for installing a. The constant term gas_ne_weight can be provided as a parameter to weight this cost in an objective function. The units of this term are dollars.","category":"page"},{"location":"math-model/#Operation-costs-of-generators","page":"Mathematical Model","title":"Operation costs of generators","text":"","category":"section"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"Some gas grid problems include operation cost of electric power generators of the form","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"sum_i in Gamma mu_2^i pg^2_i + mu_1^i pg_i + mu_0","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"where Gamma is the set of generators and mu are the coefficients of a quadratic function for computing the costs of operating generator i.  In PowerModels the units of mu are dollars per PU hour and pg is expressed in the per unit system, so the costs are computed as dollars per MW hour. To get these costs into SI units (for consistency with GasModels), the objective function computes dollars per PU second. Thus, mu_2 = fracmu_23600, mu_1 = fracmu_13600, and mu_0 = fracmu_03600 The constant term power_opf_weight can be provided as a parameter to weight this cost in an objective function. The units of this term are dollars per second. In many applications, these costs for natural gas generators are set to zero so that the cost of gas generators is based only on the cost of gas consumed (as discussed in the following sections). However, these costs can be set to nonzero values in order to model costs unrelated to fuel.","category":"page"},{"location":"math-model/#Cost-for-gas-in-a-pricing-zone","page":"Mathematical Model","title":"Cost for gas in a pricing zone","text":"","category":"section"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"Some gas-grid problems include a cost associated with the price of gas. This part of the objective function prices gas as a function of flexible gas consumed in a zone. Reference","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"Russell Bent, Seth Blumsack, Pascal Van Hentenryck, Conrado Borraz-Sánchez, Mehdi Shahriari. Joint Electricity and Natural Gas Transmission Planning With Endogenous Market Feedbacks. IEEE Transactions on Power Systems. 33 (6):  6397-6409, 2018.","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"developed a pricing objective which computes the total cost (dollars per second) of flexible gas in a zone as the maximum of two functions. The first function is","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"m_2 left(fl_z frac1rhoright)^2 + m_1 fl_z frac1rho + m_0","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"where fl_z is the total mass (kg/s) consumed in zone z, rho is standard density (kg/m^3), and m is a quadratic function with units of dollars per cubic meter per second. The second function is a minimum price for gas, i.e.,","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"C_z fl_z frac1rho","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"The units of this objective are dollars per second. The constant term gas_price_weight can be provided as a parameter to weight this cost in an objective function.","category":"page"},{"location":"math-model/#Penalty-for-pressure-in-a-pricing-zone","page":"Mathematical Model","title":"Penalty for pressure in a pricing zone","text":"","category":"section"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"Some gas grid problems include a cost associated with the pressure of gas, which is used to model the amount of work that is required to deliver gas in a congested network. Reference","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"Russell Bent, Seth Blumsack, Pascal Van Hentenryck, Conrado Borraz-Sánchez, Mehdi Shahriari. Joint Electricity and Natural Gas Transmission Planning With Endogenous Market Feedbacks. IEEE Transactions on Power Systems. 33 (6):  6397 - 6409, 2018.","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"developed a penalty objective which computes this cost (in dollars) as the function","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"n_2 pi_z^2 + n_1 pi_z + n_0","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"where  pi is the maximum pressure squared in zone z and n is a quadratic function (dollars per pressure squared). The units of this objective are dollars. The constant term gas_price_weight can be provided as a parameter to weight this cost in an objective function. Since the gas price has two terms, this term can be further weighted per zone with constant_p. (Thus, the weight is gas_price_weight * constant_p)","category":"page"},{"location":"math-model/#Maximal-load-delivery","page":"Mathematical Model","title":"Maximal load delivery","text":"","category":"section"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"The task of the Maximal Load Delivery (MLD) problem and its unit commitment variant (MLD UC) are to determine feasible steady-state operating points for severely damaged joint gas-power networks while ensuring the maximal delivery of gas and power loads simultaneously. Specifically, the MLD problem maximizes the amount of nongeneration gas load (i.e., gas demand uncommitted to electric power generators) and active power load simultaneously. Let the objective term relating to the amount of nongeneration gas load be defined by","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"eta_G(d) = left(sum_i in mathcalD^prime beta_i d_iright) left(sum_i in mathcalD^prime beta_i overlined_iright)^-1","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"where mathcalD^prime is the set the delivery points in the gas network not connected to interdependent generators in the power network, beta_i in mathbbR_+ (equal to the priority property of the delivery) is a predefined restoration priority for delivery i in mathcalD^prime, d_i is the variable mass flow of gas delivered at i in mathcalD^prime and overlined_i is the maximum deliverable gas load at i in mathcalD^prime. Next, let the objective term relating to the amount of active power load be defined by","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"eta_P(z^d) = left(sum_i in mathcalL beta_i z_i^d lvert Re(S_i^d) rvert right) left(sum_i in mathcalL beta_i lvert Re(S_i^d)rvert right)^-1","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"Here, mathcalL is the set of loads in the power network, beta_i in mathbbR_+ (equal to the weight property of the load) is the load restoration priority for load i in mathcalL, and z_i in 0 1 is a variable that scales the absolute maximum amount of active power load, lvert Re(S_i^d) rvert, at load i in mathcalL.","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"Note that these two terms, eta_G(d) and eta_P(z^d), are normalized between zero and one. This allows for a more straightforward analysis of the tradeoffs involved in maximal gas and power delivery. The objective natively supported by the build_mld and build_mld_uc methods is maximization of","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"    lambda_G eta_G(d) + lambda_P eta_P(z^d)","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"where it is recommended that 0  lambda_G  1, that gm_load_priority in the network data specification be set to the value of lambda_G desired, and that pm_load_priority similarly be set to the value 1 - lambda_G = lambda_P. This type of parameterization allows for a straightforward analysis of tradeoffs, as the objective is naturally scaled between zero and one. Lexicographic optimization of the two objective terms (e.g., maximize gas delivery first, then power) can be performed via the solve_mld function described in the Algorithmic Utilities section.","category":"page"},{"location":"utilities/#Algorithmic-Utilities","page":"-","title":"Algorithmic Utilities","text":"","category":"section"},{"location":"utilities/#solve_mld","page":"-","title":"solve_mld","text":"","category":"section"},{"location":"utilities/","page":"-","title":"-","text":"This utility serves as a convenient interface for examining the tradeoffs between lexicographic gas-power maximal load delivery (MLD) and weighted MLD problem formulations. The primary functional interface is","category":"page"},{"location":"utilities/","page":"-","title":"-","text":"solve_mld(data, model_type, build_method, optimizer, alpha; relax_integrality, kwargs...)","category":"page"},{"location":"utilities/","page":"-","title":"-","text":"Here, data is the joint network data dictionary; model_type is the model formulation (e.g., GasPowerModel{CRDWPGasModel, SOCWRPowerModel}); build_method is the build function for the problem specification (i.e., build_mld for a problem where generator and bus statuses are continuously relaxed and build_mld_uc for a problem where these statuses are treated as discrete); optimizer is the solver to be used for optimization; alpha is a continuous tradeoff parameter, which should be between zero and one, where zero corresponds to prioritizing active power delivery first, and one corresponds to prioritizing nongeneration gas delivery first; and relax_integrality is a Boolean variable indicating whether or not the continuous relaxation of the problem should be solved (false by default).","category":"page"},{"location":"utilities/","page":"-","title":"-","text":"Notably, the algorithm ultimately used to solve the MLD problem is dependent on the selection of alpha. If alpha = 1, a lexicographic algorithm is used that first solves an optimization problem that maximizes nongeneration gas delivery, then solves a second-stage optimization problem that maximizes active power load delivery. Within the second-stage problem, a constraint is applied that ensures the total nongeneration gas load in the second-stage is greater than or equal to the nongeneration gas load in the first stage. Similarly, when alpha = 0, a lexicographic algorithm is used that first solves an optimization problem that maximizes active power delivery, then solves a second-stage optimization problem that maximizes nongeneration gas delivery. Note that both of these algorithms are sometimes numerically sensitive, as the application of the second-stage constraint can sometimes result in the second-stage problem being classified as infeasible due to numerical tolerance. To alleviate this, the second-stage constraint's tolerance (currently hard coded) could be loosened, or a more direct lexicographic optimization could be implemented using a solver interface that supports it (e.g., Gurobi). The current implementation of each lexicographic algorithm is solver-independent.","category":"page"},{"location":"utilities/","page":"-","title":"-","text":"When alpha is strictly between zero and one, a single-stage optimization problem is solved, where the weighting on the nongeneration gas portion of the objective is equal to alpha and the weighting on the active power portion of the objective is equal to 1 - alpha. Since this is a single-stage problem, the algorithm that solves it is typically more numerically stable than the lexicographic algorithms described above. To gain a better understanding of the objective terms used in solve_mld, please read the Maximal load delivery section.","category":"page"},{"location":"utilities/","page":"-","title":"-","text":"Aside from the typical data provided in a result dictionary, which is returned from the solve_mld method, a number of useful data are also computed and placed at the top level of the result dictionary. These include gas_load_served, gas_load_nonpower_served, active_power_served, and reactive_power_served. In redimensionalized units (i.e., kg/s and MW), these provide the total amount of gas demand served, total amount of nongeneration gas demand served, total amount of active power load served, and total amount of reactive power load served in the solution of the MLD problem.","category":"page"},{"location":"network-data/#GasPowerModels-Network-Data-Format","page":"Network Data Format","title":"GasPowerModels Network Data Format","text":"","category":"section"},{"location":"network-data/#The-Network-Data-Dictionary","page":"Network Data Format","title":"The Network Data Dictionary","text":"","category":"section"},{"location":"network-data/","page":"Network Data Format","title":"Network Data Format","text":"Internally, GasPowerModels uses a dictionary to store network data for both power systems (see PowerModels.jl) and gas systems (see GasModels.jl). The dictionary uses strings as key values so it can be serialized to JSON for algorithmic data exchange. The I/O for GasPowerModels utilizes the serializations available in PowerModels.jl and GasModels.jl to construct the joint network model. All data are assumed to be in per unit (non-dimenisionalized) or SI units. Gas, power, and interdependency data are each stored in the data[\"it\"][\"gm\"], data[\"it\"][\"pm\"], and data[\"it\"][\"dep\"] subdictionaries of data, respectively.","category":"page"},{"location":"network-data/","page":"Network Data Format","title":"Network Data Format","text":"Besides the standard network data supported by GasModels.jl and PowerModels.jl, there are a few extra fields that are required to couple the two systems together. These are discussed as follows:","category":"page"},{"location":"network-data/#Gas-Networks","page":"Network Data Format","title":"Gas Networks","text":"","category":"section"},{"location":"network-data/","page":"Network Data Format","title":"Network Data Format","text":"{\n  \"it\": {\n      \"gm\": {\n        \"energy_factor\": <Float64>,      # Factor for converting the Joules per second used by a generator to m^3 per second gas consumption. SI units are m^3 per Joules.\n        \"price_zone\": {\n            \"1\": {\n              \"cost_q_1\": <Float64>,     # Quadratic coefficient on the cost curve for non-firm gas consumed in the zone. SI units are dollars per m^3 at standard pressure.\n              \"cost_q_2\": <Float64>,     # Linear coefficient on the cost curve for non-firm gas consumed in the zone. SI units are dollars per m^3 at standard pressure.\n              \"cost_q_3\": <Float64>,     # Constant term on the cost curve for non-firm gas consumed in the zone. SI units are dollars per m^3 at standard pressure.\n              \"cost_p_1\": <Float64>,     # Quadratic coefficient on the cost curve for pressure squared in the zone. SI units are dollars per Pascal^2.\n              \"cost_p_2\": <Float64>,     # Linear coefficient on the cost curve for pressure squared in the zone. SI units are dollars per Pascal^2.\n              \"cost_p_3\": <Float64>,     # Constant term on the cost curve for pressure squared in the zone. SI units are dollars per Pascal^2.\n              \"min_cost\": <Float64>,     # Minimum cost per unit of non-firm gas consumed in the zone. SI units are dollars per m^3 at standard pressure.\n              \"constant_p\": <Float64>,   # Bias factor for weighting pressure penalty cost relative to demand penalty cost.\n              ...\n            },\n            \"2\": {\n                ...\n            },\n            ...\n        },\n        \"junction\": {\n            \"1\": {\n              \"price_zone\": <Int64>        # Index of the corresponding price zone for the junction. -1 implies no zone.\n              ...\n            },\n            \"2\": {\n              ...\n            },\n            ...\n        },\n        ...\n    }\n  }\n}","category":"page"},{"location":"network-data/#Interdependency-Information","page":"Network Data Format","title":"Interdependency Information","text":"","category":"section"},{"location":"network-data/","page":"Network Data Format","title":"Network Data Format","text":"{\n  \"it\": {\n      \"dep\": {\n          \"delivery_gen\": {\n              \"1\": {\n                  \"delivery\": {\n                      \"id\": <String> # Index of the gas delivery corresponding to the interdependency.\n                  },\n                  \"gen\": {\n                      \"id\": <String> # Index of the power generator to be fueled by the above delivery.\n                  },\n                  \"heat_rate_curve_coefficients\": <Array{Float64}>,\n                  # First number is a quadratic term of a heat rate curve that converts MW into J/s. SI Units are J per MW produced in a second.\n                  # Second number is a linear term of a heat rate curve that converts MW into J/s. SI Units are J per MW produced in a second.\n                  # Third number is a constant term of a heat rate curve that converts MW into J/s. SI Units are J per MW produced in a second.\n                  \"status\": <Int64> # Indicator (0 or 1) specifying whether or not this interdependency component is active.\n              },\n              \"2\": {\n                ...\n              },\n              ...\n          }\n      }\n  }\n}","category":"page"},{"location":"network-data/","page":"Network Data Format","title":"Network Data Format","text":"Further, the global parameters, gas_ne_weight, power_ne_weight, power_opf_weight, gas_price_weight, gm_load_priority, and pm_load_priority may be included at the top level of the data dictionary (i.e., above data[\"it\"] as top-level entries of data) to weight the objective terms associated with expansion of gas components, expansion of power components, the generation cost, the cost of gas zones, nongeneration gas delivery load prioritization, and active power delivery load prioritization, respectively.","category":"page"},{"location":"developer/#Developer-Documentation","page":"Developer","title":"Developer Documentation","text":"","category":"section"},{"location":"developer/","page":"Developer","title":"Developer","text":"The GasPowerModels data format allows the user to specify gas network data, power network data, and data related to the interdependencies between gas and power systems.","category":"page"},{"location":"developer/#Data-Processing-functions","page":"Developer","title":"Data Processing functions","text":"","category":"section"},{"location":"developer/","page":"Developer","title":"Developer","text":"GasPowerModels relies on the automated data processing routines of GasModels and PowerModels, which include capabilities for status propagation, nondimensionalization, topology correction, etc. However, these capabilities are typically used on independent infrastructure data, whereas GasPowerModels must join these data. Thus, in preprocessing routines, it is recommended that capabilities be invoked explictly so that external dependencies are accounted for. For example, the core data parsing function parse_files performs the following operations:","category":"page"},{"location":"developer/","page":"Developer","title":"Developer","text":"function parse_files(gas_path::String, power_path::String, link_path::String)\n    joint_network_data = parse_link_file(link_path)\n    _IM.update_data!(joint_network_data, parse_gas_file(gas_path))\n    _IM.update_data!(joint_network_data, parse_power_file(power_path))\n\n    # Store whether or not each network uses per-unit data.\n    g_per_unit = get(joint_network_data[\"it\"][_GM.gm_it_name], \"is_per_unit\", 0) != 0\n    p_per_unit = get(joint_network_data[\"it\"][_PM.pm_it_name], \"per_unit\", false)\n\n    # Correct the network data.\n    correct_network_data!(joint_network_data)\n\n    # Ensure all datasets use the same units for power.\n    resolve_units!(joint_network_data, g_per_unit, p_per_unit)\n\n    # Return the network dictionary.\n    return joint_network_data\nend","category":"page"},{"location":"developer/","page":"Developer","title":"Developer","text":"Here, the parse_gas_file and parse_power_file routines skip their respective data correction steps, i.e.,","category":"page"},{"location":"developer/","page":"Developer","title":"Developer","text":"function parse_gas_file(file_path::String; skip_correct::Bool = true)\n    data = _GM.parse_file(file_path; skip_correct = skip_correct)\n    ...\nend\n\nfunction parse_power_file(file_path::String; skip_correct::Bool = true)\n    data = _PM.parse_file(file_path; validate = !skip_correct)\n    ...\nend","category":"page"},{"location":"developer/","page":"Developer","title":"Developer","text":"This ensures the per-unit statuses within source files are preserved so that GasPowerModels can determine if interdependency data requires nondimensionalization. After these routines are called, correct_network_data! executes various data and topology correction routines on gas, power, and linking data. Then, resolve_units ensures that linking data is correctly dimensionalized with respect to the initial gas and power dimensionalizations.","category":"page"},{"location":"developer/#Compositional-Problems","page":"Developer","title":"Compositional Problems","text":"","category":"section"},{"location":"developer/","page":"Developer","title":"Developer","text":"A best practice is to adopt a compositional approach for building problems in GasPowerModels, leveraging problem definitions of PowerModels and GasModels. This helps lessen the impact of breaking changes across independent infrastructure packages. For example, the joint network expansion planning problem invokes the network expansion planning problems of GasModels and PowerModels directly with routines like","category":"page"},{"location":"developer/","page":"Developer","title":"Developer","text":"# Gas-only variables and constraints\n_GM.build_nels(_get_gasmodel_from_gaspowermodel(gpm))\n\n# Power-only variables and constraints\n_PM.build_tnep(_get_powermodel_from_gaspowermodel(gpm))\n\n# Gas-power related parts of the problem formulation.\nfor i in _get_interdependent_deliveries(gpm)\n    constraint_heat_rate(gpm, i)\nend\n\n# Objective minimizes cost of network expansion.\nobjective_min_ne_cost(gpm)","category":"page"},{"location":"developer/","page":"Developer","title":"Developer","text":"Compared to the GasModels (_GM) and PowerModels (_PM) routines, the GasPowerModels routines only specify interdependency constraints and the joint objective.","category":"page"},{"location":"parser/#File-IO","page":"File IO","title":"File IO","text":"","category":"section"},{"location":"parser/","page":"File IO","title":"File IO","text":"Parsing uses the native parsing features of GasModels.jl and PowerModels.jl with extra features to parse information used for coupling infrastructures together.","category":"page"},{"location":"parser/","page":"File IO","title":"File IO","text":"CurrentModule = GasPowerModels","category":"page"},{"location":"parser/#Coupling-Data-Formats","page":"File IO","title":"Coupling Data Formats","text":"","category":"section"},{"location":"parser/","page":"File IO","title":"File IO","text":"The GasPowerModels parsing implementation relies on data formats that support extensions to accommodate arbitrary extra data fields such as those required to define couplings between infrastructures. Thus, GasPowerModels largely relies on parsing of MATPOWER and MATGAS files to incorporate some data fields. In addition, the coupling between gas generators and delivery points is accomplished via a tertiary JSON linking file of the following form:","category":"page"},{"location":"parser/","page":"File IO","title":"File IO","text":"{\n  \"it\": {\n      \"dep\": {\n          \"delivery_gen\": {\n              \"1\": {\n                  \"delivery\": {\n                      \"id\": <String> # Index of the gas delivery corresponding to the interdependency.\n                  },\n                  \"gen\": {\n                      \"id\": <String> # Index of the power generator to be fueled by the above delivery.\n                  },\n                  \"heat_rate_curve_coefficients\": <Array{Float64}>,\n                  # First number is a quadratic term of a heat rate curve that converts MW into J/s. SI Units are J per MW produced in a second.\n                  # Second number is a linear term of a heat rate curve that converts MW into J/s. SI Units are J per MW produced in a second.\n                  # Third number is a constant term of a heat rate curve that converts MW into J/s. SI Units are J per MW produced in a second.\n                  \"status\": <Int64> # Indicator (0 or 1) specifying whether or not this interdependency component is active.\n              },\n              \"2\": {\n                ...\n              },\n              ...\n          }\n      }\n  }\n}","category":"page"},{"location":"parser/#Price-Zone-Data-Formats","page":"File IO","title":"Price Zone Data Formats","text":"","category":"section"},{"location":"parser/","page":"File IO","title":"File IO","text":"Many of the problem formulations supported by GasPowerModels rely on defining collections of junctions as zones.  These are used to model things like pricing regions. To support these features, GasPowerModels uses the parsing extensions of the MATGAS format. A pricing zone is defined with","category":"page"},{"location":"parser/","page":"File IO","title":"File IO","text":"%column_names% id  cost_q_1  cost_q_2  cost_q_3  cost_p_1  cost_p_2  cost_p_3  min_cost  constant_p  comment\nmgc.price_zone = [\n...\n];","category":"page"},{"location":"parser/","page":"File IO","title":"File IO","text":"where the first column is used to uniquely identify the price zone, the cost_q columns are used to define the constants of the quadratic equation used to determine the price of gas in the zone based on the amount of gas consumed in the zone (square, linear, and constant), the cost_p columns are used to defined the constants of the quadratic equation used to determine the pressure penalty in the zone based on the maximum pressure in the zone (square, linear, and constant), min_cost is a minimum price for gas in the zone, constant_p is a weighting term to weight the pressure penalty relative to the price of gas, and comment is a string field for information about the pricing zone (such as its name). Junctions are then linked to the pricing zone with a table of the form","category":"page"},{"location":"parser/","page":"File IO","title":"File IO","text":"%column_names% price_zone\nmgc.junction_data = [\n...\n];","category":"page"},{"location":"parser/","page":"File IO","title":"File IO","text":"where each row is used to provide the id of the price zone of the junction (in the same order as the junction table). The value -1 is used to denote that the junction is not part of a pricing zone.","category":"page"},{"location":"quickguide/#Quick-Start-Guide","page":"Getting Started","title":"Quick Start Guide","text":"","category":"section"},{"location":"quickguide/#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"The latest stable release of GasPowerModels can be installed using the Julia package manager with","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"] add GasPowerModels","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"For the current development version, install the package using","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"] add GasPowerModels#master","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"Finally, test that the package works as expected by executing","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"] test GasPowerModels","category":"page"},{"location":"quickguide/#Installation-of-Optimization-Solvers","page":"Getting Started","title":"Installation of Optimization Solvers","text":"","category":"section"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"At least one optimization solver is required to run GasPowerModels. The solver selected typically depends on the type of problem formulation being employed. As an example, the mixed-integer nonlinear programming solver Juniper can be used for testing any of the problem formulations considered in this package. Juniper itself depends on the installation of a nonlinear programming solver (e.g., Ipopt) and a mixed-integer linear programming solver (e.g., CBC). Installation of the JuMP interfaces to Juniper, Ipopt, and CBC can be performed via the Julia package manager, i.e.,","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"] add JuMP Juniper Ipopt Cbc","category":"page"},{"location":"quickguide/#Solving-a-Problem","page":"Getting Started","title":"Solving a Problem","text":"","category":"section"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"Once the above dependencies have been installed, obtain the files GasLib-11-NE.m, case5-NE.m, and GasLib-11-case5.json.  Here, GasLib-11-NE.m is a MATGAS file describing a small GasLib network. In accord, case5-NE.m is a MATPOWER file specifying a five-bus power network. Finally, GasLib-11-case5.json is a JSON file specifying interdependencies between the two networks. The combination of data from these three files provides the required information to set up the problem. After downloading the data, the optimal power flow with network expansion (ne_opf) problem can be solved with","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"using JuMP, Juniper, Ipopt, Cbc\nusing GasPowerModels\n\n# Set up the optimization solvers.\nipopt = JuMP.optimizer_with_attributes(Ipopt.Optimizer, \"print_level\" => 0, \"sb\" => \"yes\")\ncbc = JuMP.optimizer_with_attributes(Cbc.Optimizer, \"logLevel\" => 0)\njuniper = JuMP.optimizer_with_attributes(Juniper.Optimizer, \"nl_solver\" => ipopt, \"mip_solver\" => cbc)\n\n# Specify paths to the gas and power network files.\ng_file = \"test/data/matgas/GasLib-11-NE.m\" # Gas network.\np_file = \"test/data/matpower/case5-NE.m\" # Power network.\nlink_file = \"test/data/json/GasLib-11-case5.json\" # Linking data.\n\n# Specify the gas-power formulation type.\ngpm_type = GasPowerModel{CRDWPGasModel, SOCWRPowerModel}\n\n# Solve the optimal power flow with network expansion problem.\nresult = run_ne_opf(g_file, p_file, link_file, gpm_type, juniper;\n    solution_processors = [GasPowerModels._GM.sol_psqr_to_p!,\n    GasPowerModels._PM.sol_data_model!])","category":"page"},{"location":"quickguide/#Obtaining-Results","page":"Getting Started","title":"Obtaining Results","text":"","category":"section"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"The run commands in GasPowerModels return detailed results data in the form of a Julia Dict. This dictionary can be saved for further processing as follows:","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"result = run_ne_opf(g_file, p_file, link_file, gpm_type, juniper;\n    solution_processors = [GasPowerModels._GM.sol_psqr_to_p!,\n    GasPowerModels._PM.sol_data_model!])","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"For example, the algorithm's runtime and final objective value can be accessed with","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"result[\"solve_time\"] # Total solve time required (seconds).\nresult[\"objective\"] # Final objective value (in units of the objective).","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"The \"solution\" field contains detailed information about the solution produced by the run method. For example, the following can be used to read the build status of the network expansion pipe in the gas system","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"result[\"solution\"][\"it\"][\"gm\"][\"ne_pipe\"][\"4\"][\"z\"]","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"As another example, the following can be used to inspect pressures in the solution","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"Dict(name => data[\"p\"] for (name, data) in result[\"solution\"][\"it\"][\"gm\"][\"junction\"])","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"As a final example, the following can be used to inspect real power generation in the solution","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"Dict(name => data[\"pg\"] for (name, data) in result[\"solution\"][\"it\"][\"pm\"][\"gen\"])","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"For more information about GasPowerModels result data, see the GasPowerModels Result Data Format section.","category":"page"},{"location":"quickguide/#Accessing-Different-Formulations","page":"Getting Started","title":"Accessing Different Formulations","text":"","category":"section"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"To solve the preceding problem using a mixed-integer nonconvex model for natural gas flow, the following can be executed:","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"# Specify the gas-power formulation type.\ngpm_type = GasPowerModel{DWPGasModel, SOCWRPowerModel}\n\n# Solve the optimal power flow with network expansion problem.\nresult = run_ne_opf(g_file, p_file, link_file, gpm_type, juniper;\n    solution_processors = [GasPowerModels._GM.sol_psqr_to_p!,\n    GasPowerModels._PM.sol_data_model!])","category":"page"},{"location":"quickguide/#Modifying-Network-Data","page":"Getting Started","title":"Modifying Network Data","text":"","category":"section"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"The following example demonstrates one way to perform GasPowerModels solves while modifying network data.","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"# Read in the gas, power, and linking data.\ndata = parse_files(g_file, p_file, link_file)\n\n# Reduce the minimum pressures at selected junctions.\ndata[\"it\"][\"gm\"][\"junction\"][\"1\"][\"p_min\"] *= 0.1\ndata[\"it\"][\"gm\"][\"junction\"][\"2\"][\"p_min\"] *= 0.1\ndata[\"it\"][\"gm\"][\"junction\"][\"3\"][\"p_min\"] *= 0.1\n\n# Solve the problem using `data`.\nresult_mod = run_ne_opf(data, gpm_type, juniper;\n    solution_processors = [GasPowerModels._GM.sol_psqr_to_p!,\n    GasPowerModels._PM.sol_data_model!])","category":"page"},{"location":"quickguide/#Alternate-Methods-for-Building-and-Solving-Models","page":"Getting Started","title":"Alternate Methods for Building and Solving Models","text":"","category":"section"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"The following example demonstrates how to decompose a run_ne_opf call into separate model building and solving steps. This allows for inspection of the JuMP model created by GasPowerModels:","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"# Read in the gas, power, and linking data.\ndata = parse_files(g_file, p_file, link_file)\n\n# Store the required `ref` extensions for the problem.\nref_extensions = [GasPowerModels._GM.ref_add_ne!, ref_add_price_zones!,\n    GasPowerModels._PM.ref_add_on_off_va_bounds!,\n    GasPowerModels._PM.ref_add_ne_branch!]\n\n# Instantiate the model.\ngpm = instantiate_model(data, gpm_type, build_ne_opf, ref_extensions = ref_extensions)\n\n# Print the contents of the JuMP model.\nprintln(gpm.model)","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"The problem can then be solved and its two result dictionaries can be stored via:","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"# Solve the GasPowerModels problem and store the result.\nresult = GasPowerModels._IM.optimize_model!(gpm, optimizer = juniper)","category":"page"},{"location":"constraints/#Constraints","page":"Constraints","title":"Constraints","text":"","category":"section"},{"location":"constraints/","page":"Constraints","title":"Constraints","text":"We define the following methods to provide a compositional approach toward defining common constraints used in coupled gas-power models. These methods should always be defined over AbstractGasPowerModel.","category":"page"},{"location":"constraints/","page":"Constraints","title":"Constraints","text":"Modules = [GasPowerModels]\nPages   = [\"core/constraint_template.jl\"]\nOrder   = [:type, :function]\nPrivate  = true","category":"page"},{"location":"constraints/#GasPowerModels.constraint_heat_rate-Tuple{AbstractGasPowerModel, Int64}","page":"Constraints","title":"GasPowerModels.constraint_heat_rate","text":"Constraint for coupling the production of power at natural gas generators with the gas consumption required to produce this power. The full nonconvex constraint is stated as\n\nfl = e rho sum_i in Gamma (h_i^0 pg_i^2 + h_i^1 pg_i + h_i^2)\n\nwhere h is a quadratic function used to convert MW (pg) into Joules consumed per second (J/s). h is in units of (J/MW^2, J/MW, J). This is then converted to mass flow, fl, (kg/s) of gas consumed to produce this energy. Here, e is an energy factor (m^3/J) and rho is standard density (kg/m^3). This constraint can be relaxed to a convex quadratic of the form\n\nfl geq e rho sum_i in Gamma (h_i^0 pg_i^2 + h_i^1 pg_i + h_i^2)\n\n\n\n\n\n","category":"method"},{"location":"constraints/#GasPowerModels.constraint_heat_rate_on_off-Tuple{AbstractGasPowerModel, Int64}","page":"Constraints","title":"GasPowerModels.constraint_heat_rate_on_off","text":"Constraint for coupling the production of power at dispatchable natural gas generators with the gas consumption required to produce this power. The full nonconvex constraint is stated as\n\nfl = e rho sum_i in Gamma (h_i^0 pg_i^2 + h_i^1 pg_i + h_i^2 z_i)\n\nwhere h is a quadratic function used to convert MW (pg) into Joules consumed per second (J/s). h is in units of (J/MW^2, J/MW, J). This is then converted to mass flow, fl, (kg/s) of gas consumed to produce this energy. Here, e is an energy factor (m^3/J) and rho is standard density (kg/m^3). z is a discrete variable indicating the status of the generator. This constraint can be relaxed to a convex quadratic of the form\n\nfl geq e rho sum_i in Gamma (h_i^0 pg_i^2 + h_i^1 pg_i + h_i^2 z_i)\n\n\n\n\n\n","category":"method"},{"location":"constraints/#GasPowerModels.constraint_pressure_price-Tuple{AbstractGasPowerModel, Int64}","page":"Constraints","title":"GasPowerModels.constraint_pressure_price","text":"Constraint that is used to compute the cost for pressure in a zone. Since the cost of pressure typically appears in the objective function or is bounded, the constraints do not compute the price directly. Rather they act as a lower bound on the price of pressure, which is implictly tight when this term only appears in the objective function:\n\npc_z ge p_z1 * pi_z^2 + cp_z2 * pi_z + cp_z3\n\nwhere pc_z is the maximum pressure price in zone z and p_z is a quadratic function of the maximum pressure in z.\n\n\n\n\n\n","category":"method"},{"location":"constraints/#GasPowerModels.constraint_zone_demand-Tuple{AbstractGasPowerModel, Int64}","page":"Constraints","title":"GasPowerModels.constraint_zone_demand","text":"Auxiliary constraint that computes the total consumed gas in a zone. This constraint takes the form of\n\nfl_z = sum_k in z fl_k\n\nwhere fl_z is the total consumed gas in zone z and fl_k is gas consumed at delivery k in the zone.\n\n\n\n\n\n","category":"method"},{"location":"constraints/#GasPowerModels.constraint_zone_demand_price-Tuple{AbstractGasPowerModel, Int64}","page":"Constraints","title":"GasPowerModels.constraint_zone_demand_price","text":"Constraint that is used to compute cost for gas in a zone. Since the cost of gas typically appears in the objective function or is bounded, these constraints do not compute the price directly. Rather, they place a lower bound on the price of gas. There are two constraints stated here. The first constraint is\n\ncost_z ge q_z1 * (fl_z * frac10rho)^2 + q_z2 * fl_z * frac10rho + q_z3\n\nThe second constraint is\n\nm_z * fl_z * frac10rho\n\nwhere cost_z is the daily (24-hour) cost of gas in zone z. q is the quadratic cost of gas as function of gas consumed in the zone, fl_z rho is standard density. m is the minimum cost of gas in terms kg/s.\n\n\n\n\n\n","category":"method"},{"location":"constraints/#GasPowerModels.constraint_zone_pressure-Tuple{GasModels.AbstractGasModel, Int64}","page":"Constraints","title":"GasPowerModels.constraint_zone_pressure","text":"Constraint that is used to compute the maximum pressure in a price zone. Since the maximum pressure typically appears in a minimization objective function, the max is modeled as a lower bound of the form\n\npi_z ge pi_i forall i in z\n\n\n\n\n\n","category":"method"},{"location":"specifications/#Problem-Specifications","page":"Problem Specifications","title":"Problem Specifications","text":"","category":"section"},{"location":"specifications/","page":"Problem Specifications","title":"Problem Specifications","text":"In these specifications, _GM refers to GasModels, _PM refers to PowerModels, and _PMR refers to PowerModelsRestoration.","category":"page"},{"location":"specifications/#Gas-Power-Flow-(GPF)","page":"Problem Specifications","title":"Gas-Power Flow (GPF)","text":"","category":"section"},{"location":"specifications/#Inherited-Variables-and-Constraints","page":"Problem Specifications","title":"Inherited Variables and Constraints","text":"","category":"section"},{"location":"specifications/","page":"Problem Specifications","title":"Problem Specifications","text":"# Gas-only variables and constraints\n_GM.build_gf(_get_gasmodel_from_gaspowermodel(gpm))\n\n# Power-only variables and constraints\n_PM.build_pf(_get_powermodel_from_gaspowermodel(gpm))","category":"page"},{"location":"specifications/#Constraints","page":"Problem Specifications","title":"Constraints","text":"","category":"section"},{"location":"specifications/","page":"Problem Specifications","title":"Problem Specifications","text":"# Gas-power related parts of the problem formulation.\nfor i in _get_interdependent_deliveries(gpm)\n    constraint_heat_rate(gpm, i)\nend","category":"page"},{"location":"specifications/#Optimal-Power-Flow-(OPF)","page":"Problem Specifications","title":"Optimal Power Flow (OPF)","text":"","category":"section"},{"location":"specifications/#Objective","page":"Problem Specifications","title":"Objective","text":"","category":"section"},{"location":"specifications/","page":"Problem Specifications","title":"Problem Specifications","text":"# Objective minimizes operation cost.\nobjective_min_opf_cost(gpm)","category":"page"},{"location":"specifications/#Inherited-Variables-and-Constraints-2","page":"Problem Specifications","title":"Inherited Variables and Constraints","text":"","category":"section"},{"location":"specifications/","page":"Problem Specifications","title":"Problem Specifications","text":"# Gas-only variables and constraints.\n_GM.build_gf(_get_gasmodel_from_gaspowermodel(gpm))\n\n# Power-only variables and constraints.\n_PM.build_pf(_get_powermodel_from_gaspowermodel(gpm))","category":"page"},{"location":"specifications/#Variables","page":"Problem Specifications","title":"Variables","text":"","category":"section"},{"location":"specifications/","page":"Problem Specifications","title":"Problem Specifications","text":"# Variables related to the OPF problem.\nvariable_zone_demand(gpm)\nvariable_zone_demand_price(gpm)\nvariable_zone_pressure(gpm)\nvariable_pressure_price(gpm)","category":"page"},{"location":"specifications/#Constraints-2","page":"Problem Specifications","title":"Constraints","text":"","category":"section"},{"location":"specifications/","page":"Problem Specifications","title":"Problem Specifications","text":"# Gas-power related parts of the problem formulation.\nfor i in _get_interdependent_deliveries(gpm)\n    constraint_heat_rate(gpm, i)\nend\n\n# Constraints related to price zones.\nfor (i, price_zone) in _IM.ref(gpm, _GM.gm_it_sym, :price_zone)\n    constraint_zone_demand(gpm, i)\n    constraint_zone_demand_price(gpm, i)\n    constraint_zone_pressure(gpm, i)\n    constraint_pressure_price(gpm, i)\nend","category":"page"},{"location":"specifications/#Network-Expansion-Planning-(NE)","page":"Problem Specifications","title":"Network Expansion Planning (NE)","text":"","category":"section"},{"location":"specifications/#Objective-2","page":"Problem Specifications","title":"Objective","text":"","category":"section"},{"location":"specifications/","page":"Problem Specifications","title":"Problem Specifications","text":"# Objective minimizes cost of network expansion.\nobjective_min_ne_cost(gpm)","category":"page"},{"location":"specifications/#Inherited-Variables-and-Constraints-3","page":"Problem Specifications","title":"Inherited Variables and Constraints","text":"","category":"section"},{"location":"specifications/","page":"Problem Specifications","title":"Problem Specifications","text":"# Gas-only variables and constraints\n_GM.build_nels(_get_gasmodel_from_gaspowermodel(gpm))\n\n# Power-only variables and constraints\n_PM.build_tnep(_get_powermodel_from_gaspowermodel(gpm))","category":"page"},{"location":"specifications/#Constraints-3","page":"Problem Specifications","title":"Constraints","text":"","category":"section"},{"location":"specifications/","page":"Problem Specifications","title":"Problem Specifications","text":"# Gas-power related parts of the problem formulation.\nfor i in _get_interdependent_deliveries(gpm)\n    constraint_heat_rate(gpm, i)\nend","category":"page"},{"location":"specifications/#Expansion-Planning-with-Optimal-Power-Flow-(NE-OPF)","page":"Problem Specifications","title":"Expansion Planning with Optimal Power Flow (NE OPF)","text":"","category":"section"},{"location":"specifications/#Objective-3","page":"Problem Specifications","title":"Objective","text":"","category":"section"},{"location":"specifications/","page":"Problem Specifications","title":"Problem Specifications","text":"# Objective minimizes network expansion, demand, and pressure cost.\nobjective_min_ne_opf_cost(gpm)","category":"page"},{"location":"specifications/#Inherited-Variables-and-Constraints-4","page":"Problem Specifications","title":"Inherited Variables and Constraints","text":"","category":"section"},{"location":"specifications/","page":"Problem Specifications","title":"Problem Specifications","text":"# Gas-only variables and constraints.\n_GM.build_nels(_get_gasmodel_from_gaspowermodel(gpm))\n\n# Power-only variables and constraints.\n_PM.build_tnep(_get_powermodel_from_gaspowermodel(gpm))","category":"page"},{"location":"specifications/#Variables-2","page":"Problem Specifications","title":"Variables","text":"","category":"section"},{"location":"specifications/","page":"Problem Specifications","title":"Problem Specifications","text":"# Variables related to the NE OPF problem.\nvariable_zone_demand(gpm)\nvariable_zone_demand_price(gpm)\nvariable_zone_pressure(gpm)\nvariable_pressure_price(gpm)","category":"page"},{"location":"specifications/#Constraints-4","page":"Problem Specifications","title":"Constraints","text":"","category":"section"},{"location":"specifications/","page":"Problem Specifications","title":"Problem Specifications","text":"# Gas-power related parts of the problem formulation.\nfor i in _get_interdependent_deliveries(gpm)\n    constraint_heat_rate(gpm, i)\nend\n\n# Constraints related to price zones.\nfor (i, price_zone) in _IM.ref(gpm, _GM.gm_it_sym, :price_zone)\n    constraint_zone_demand(gpm, i)\n    constraint_zone_demand_price(gpm, i)\n    constraint_zone_pressure(gpm, i)\n    constraint_pressure_price(gpm, i)\nend","category":"page"},{"location":"specifications/#Maximum-Load-Delivery-(MLD)","page":"Problem Specifications","title":"Maximum Load Delivery (MLD)","text":"","category":"section"},{"location":"specifications/#Objective-4","page":"Problem Specifications","title":"Objective","text":"","category":"section"},{"location":"specifications/","page":"Problem Specifications","title":"Problem Specifications","text":"# Objective maximizes the amount of load delivered.\nobjective_max_load(gpm)","category":"page"},{"location":"specifications/#Inherited-Variables-and-Constraints-5","page":"Problem Specifications","title":"Inherited Variables and Constraints","text":"","category":"section"},{"location":"specifications/","page":"Problem Specifications","title":"Problem Specifications","text":"# Gas-only variables and constraints.\n_GM.build_ls(_get_gasmodel_from_gaspowermodel(gpm))\n\n# Power-only variables and constraints (from PowerModelsRestoration).\n_PMR.build_mld(_get_powermodel_from_gaspowermodel(gpm))","category":"page"},{"location":"specifications/#Constraints-5","page":"Problem Specifications","title":"Constraints","text":"","category":"section"},{"location":"specifications/","page":"Problem Specifications","title":"Problem Specifications","text":"# Gas-power related parts of the problem formulation.\nfor i in _get_interdependent_deliveries(gpm)\n    constraint_heat_rate_on_off(gpm, i)\nend","category":"page"},{"location":"specifications/#Maximum-Load-Delivery-with-Unit-Commitment-(MLD-UC)","page":"Problem Specifications","title":"Maximum Load Delivery with Unit Commitment (MLD UC)","text":"","category":"section"},{"location":"specifications/#Objective-5","page":"Problem Specifications","title":"Objective","text":"","category":"section"},{"location":"specifications/","page":"Problem Specifications","title":"Problem Specifications","text":"# Objective maximizes the amount of load delivered.\nobjective_max_load(gpm)","category":"page"},{"location":"specifications/#Inherited-Variables-and-Constraints-6","page":"Problem Specifications","title":"Inherited Variables and Constraints","text":"","category":"section"},{"location":"specifications/","page":"Problem Specifications","title":"Problem Specifications","text":"# Gas-only variables and constraints.\n_GM.build_ls(_get_gasmodel_from_gaspowermodel(gpm))\n\n# Power-only variables and constraints (from PowerModelsRestoration).\n_PMR.build_mld_uc(_get_powermodel_from_gaspowermodel(gpm))","category":"page"},{"location":"specifications/#Constraints-6","page":"Problem Specifications","title":"Constraints","text":"","category":"section"},{"location":"specifications/","page":"Problem Specifications","title":"Problem Specifications","text":"# Gas-power related parts of the problem formulation.\nfor i in _get_interdependent_deliveries(gpm)\n    constraint_heat_rate_on_off(gpm, i)\nend","category":"page"},{"location":"result-data/#GasPowerModels-Result-Data-Format","page":"Result Data Format","title":"GasPowerModels Result Data Format","text":"","category":"section"},{"location":"result-data/#The-Result-Data-Dictionary","page":"Result Data Format","title":"The Result Data Dictionary","text":"","category":"section"},{"location":"result-data/","page":"Result Data Format","title":"Result Data Format","text":"GasPowerModels uses a dictionary to organize the results of a run_ command. The dictionary uses strings as key values so it can be serialized to JSON for algorithmic data exchange. The data dictionary organization is designed to be consistent with The Network Data Dictionary.","category":"page"},{"location":"result-data/","page":"Result Data Format","title":"Result Data Format","text":"At the top level the results data dictionary is structured as follows:","category":"page"},{"location":"result-data/","page":"Result Data Format","title":"Result Data Format","text":"{\n  \"optimizer\": <string>,        # name of the solver used to solve the model\n  \"termination_status\": <type>, # optimizer status at termination\n  \"dual_status\": <type>,        # optimizer dual status at termination\n  \"primal_status\": <type>,      # optimizer primal status at termination\n  \"solve_time\": <float>,        # reported solve time (in seconds)\n  \"objective\": <float>,         # the final evaluation of the objective function\n  \"objective_lb\": <float>,      # the final lower bound of the objective function (if available)\n  \"solution\": {...}             # complete solution information (details below)\n}","category":"page"},{"location":"result-data/#Solution-Data","page":"Result Data Format","title":"Solution Data","text":"","category":"section"},{"location":"result-data/","page":"Result Data Format","title":"Result Data Format","text":"The solution object provides detailed information about the problem solution produced by the run command. The solution is organized similarly to The Network Data Dictionary with the same nested structure and parameter names, when available. The solution object merges the solution information for both the power system and the natural gas system into the same object. For example result[\"solution\"][\"it\"][\"gm\"][\"junction\"][\"1\"] reports all the solution values associated with natural gas junction 1, i.e.,","category":"page"},{"location":"result-data/","page":"Result Data Format","title":"Result Data Format","text":"{\n    \"psqr\": 0.486908,\n    \"p\": 0.697788\n}","category":"page"},{"location":"result-data/","page":"Result Data Format","title":"Result Data Format","text":"and result[\"solution\"][\"it\"][\"pm\"][\"gen\"][\"1\"] reports all the solution values associated with electric power generator 1, i.e.,","category":"page"},{"location":"result-data/","page":"Result Data Format","title":"Result Data Format","text":"{\n    \"pg\": 1.45,\n    \"qg\": 0.02\n}","category":"page"},{"location":"result-data/","page":"Result Data Format","title":"Result Data Format","text":"Because the data dictionary and the solution dictionary have the same structure, the InfrastructureModels update_data! helper function can be used to update a data dictionary with values from a solution, e.g.,","category":"page"},{"location":"result-data/","page":"Result Data Format","title":"Result Data Format","text":"_IM.update_data!(data[\"it\"][\"gm\"][\"junction\"][\"1\"], result[\"solution\"][\"it\"][\"gm\"][\"junction\"][\"1\"])","category":"page"},{"location":"result-data/","page":"Result Data Format","title":"Result Data Format","text":"By default, all results are reported per-unit (non-dimensionalized). Functions from GasModels and PowerModels can be used to convert such data back to their dimensionalized forms.","category":"page"},{"location":"formulations/#Network-Formulations","page":"Network Formulations","title":"Network Formulations","text":"","category":"section"},{"location":"formulations/","page":"Network Formulations","title":"Network Formulations","text":"The network formulations for joint gas-power modeling use the formulations defined in GasModels.jl and PowerModels.jl.","category":"page"},{"location":"formulations/#GasPowerModels-Types","page":"Network Formulations","title":"GasPowerModels Types","text":"","category":"section"},{"location":"formulations/","page":"Network Formulations","title":"Network Formulations","text":"CurrentModule = GasPowerModels","category":"page"},{"location":"formulations/","page":"Network Formulations","title":"Network Formulations","text":"Specification of a GasPowerModel requires the specification of both a GasModels.AbstractGasModel and a PowerModels.AbstractPowerModel, respectively. For example, to specify a formulation that leverages the CRDWPGasModel and SOCWRPowerModel types, the corresponding GasPowerModel type would be","category":"page"},{"location":"formulations/","page":"Network Formulations","title":"Network Formulations","text":"GasPowerModel{CRDWPGasModel, SOCWRPowerModel}","category":"page"},{"location":"formulations/","page":"Network Formulations","title":"Network Formulations","text":"GasPowerModels then utilizes the following (internal) function to construct a GasPowerModel object:","category":"page"},{"location":"formulations/","page":"Network Formulations","title":"Network Formulations","text":"instantiate_model","category":"page"},{"location":"formulations/#GasPowerModels.instantiate_model","page":"Network Formulations","title":"GasPowerModels.instantiate_model","text":"instantiate_model(g_file, p_file, link_file, model_type, build_method; kwargs...)\n\nInstantiates and returns a GasPowerModels modeling object from gas and power input\nfiles `g_file` and `p_file`. Additionally, `link_file` is an input file that links\ngas and power networks, `model_type` is the gas-power modeling type, and\n`build_method` is the build method for the problem specification being considered.\n\n\n\n\n\n","category":"function"},{"location":"formulations/#Type-Hierarchy","page":"Network Formulations","title":"Type Hierarchy","text":"","category":"section"},{"location":"formulations/","page":"Network Formulations","title":"Network Formulations","text":"GasPowerModels inherits the type hierarchies of GasModels and PowerModels. Constraint and objective functions are then dispatched based on the choice of types for each of the models. An example is seen in the function","category":"page"},{"location":"formulations/","page":"Network Formulations","title":"Network Formulations","text":"constraint_heat_rate\nconstraint_heat_rate_on_off","category":"page"},{"location":"formulations/#GasPowerModels.constraint_heat_rate","page":"Network Formulations","title":"GasPowerModels.constraint_heat_rate","text":"Constraint for coupling the production of power at natural gas generators with the gas consumption required to produce this power. The full nonconvex constraint is stated as\n\nfl = e rho sum_i in Gamma (h_i^0 pg_i^2 + h_i^1 pg_i + h_i^2)\n\nwhere h is a quadratic function used to convert MW (pg) into Joules consumed per second (J/s). h is in units of (J/MW^2, J/MW, J). This is then converted to mass flow, fl, (kg/s) of gas consumed to produce this energy. Here, e is an energy factor (m^3/J) and rho is standard density (kg/m^3). This constraint can be relaxed to a convex quadratic of the form\n\nfl geq e rho sum_i in Gamma (h_i^0 pg_i^2 + h_i^1 pg_i + h_i^2)\n\n\n\n\n\n","category":"function"},{"location":"formulations/#GasPowerModels.constraint_heat_rate_on_off","page":"Network Formulations","title":"GasPowerModels.constraint_heat_rate_on_off","text":"Constraint for coupling the production of power at dispatchable natural gas generators with the gas consumption required to produce this power. The full nonconvex constraint is stated as\n\nfl = e rho sum_i in Gamma (h_i^0 pg_i^2 + h_i^1 pg_i + h_i^2 z_i)\n\nwhere h is a quadratic function used to convert MW (pg) into Joules consumed per second (J/s). h is in units of (J/MW^2, J/MW, J). This is then converted to mass flow, fl, (kg/s) of gas consumed to produce this energy. Here, e is an energy factor (m^3/J) and rho is standard density (kg/m^3). z is a discrete variable indicating the status of the generator. This constraint can be relaxed to a convex quadratic of the form\n\nfl geq e rho sum_i in Gamma (h_i^0 pg_i^2 + h_i^1 pg_i + h_i^2 z_i)\n\n\n\n\n\n","category":"function"},{"location":"formulations/","page":"Network Formulations","title":"Network Formulations","text":"The convention is that, if a relaxation or approximation of a nonconvex constraint is used in a natural gas and/or electric power model, the linking constraint will also be similarly relaxed or approximated according to the most \"complex\" independent infrastructure modeling formulation. For example, if the natural gas formulation uses a linear representation, and the electric power model uses a quadratic representation, then the linking constraint uses the tightest possible relaxation using linear and quadratic interdependency equations.","category":"page"},{"location":"variables/#Variables","page":"Variables","title":"Variables","text":"","category":"section"},{"location":"variables/","page":"Variables","title":"Variables","text":"We provide the following methods to provide a compositional approach for defining common variables used in joint gas-power models. These methods should always be defined over AbstractGasPowerModel.","category":"page"},{"location":"variables/","page":"Variables","title":"Variables","text":"Modules = [GasPowerModels]\nPages   = [\"core/variable.jl\"]\nOrder   = [:type, :function]\nPrivate  = true","category":"page"},{"location":"variables/#GasPowerModels.getstart","page":"Variables","title":"GasPowerModels.getstart","text":"Function for extracting the start/initial value of a variable.\n\n\n\n\n\n","category":"function"},{"location":"variables/#GasPowerModels.variable_pressure_price","page":"Variables","title":"GasPowerModels.variable_pressure_price","text":"Function for creating variables associated with zonal pressure price: omega.\n\n\n\n\n\n","category":"function"},{"location":"variables/#GasPowerModels.variable_zone_demand","page":"Variables","title":"GasPowerModels.variable_zone_demand","text":"Function for creating variables associated with zonal demand: psi.\n\n\n\n\n\n","category":"function"},{"location":"variables/#GasPowerModels.variable_zone_demand_price","page":"Variables","title":"GasPowerModels.variable_zone_demand_price","text":"Function for creating variables associated with zonal demand price: gamma.\n\n\n\n\n\n","category":"function"},{"location":"variables/#GasPowerModels.variable_zone_pressure","page":"Variables","title":"GasPowerModels.variable_zone_pressure","text":"Function for creating variables associated with zonal pressure: rho.\n\n\n\n\n\n","category":"function"},{"location":"examples/#Examples-Documentation","page":"Examples","title":"Examples Documentation","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The examples folder in the root directory contains a library of gas-power network instances which have been developed in the literature.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Many of the examples can be run using the run_examples.jl script which executes various problems and formulations on the library of instances and verifies that GasPowerModels returns solutions which were reported in the literature. Some results, especially those based on relaxations, have departed from those reported in the literature due to advances that have tightened these relaxations since those papers have been published.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Long term, the plan is to move the examples out of the GasPowerModels repository and maintain a special GasPowerModelsLib repository specifically for warehousing models developed in the literature.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Problems Source\ncase36 1\ncase36-ne-* 1\ncase14-ne 2\ncase14-ne-100 2\nnortheast 1\nnortheast-ne-* 1\nnortheast-ne-C 1\nnortheast-ne-D-* 1\nnortheast-ne-E-* 1\nbelgian-ne 2\nbelgian-ne-100 2","category":"page"},{"location":"examples/#Sources","page":"Examples","title":"Sources","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"[1] Russell Bent, Seth Blumsack, Pascal Van Hentenryck, Conrado Borraz-Sánchez, Mehdi Shahriari. Joint Electricity and Natural Gas Transmission Planning With Endogenous Market Feedbacks. IEEE Transactions on Power Systems. 33 (6): 6397-6409, 2018.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"[2] C. Borraz-Sanchez, R. Bent, S. Backhaus, S. Blumsack, H. Hijazi, and P. van Hentenryck. Convex Optimization for Joint Expansion Planning of Natural Gas and Power Systems. Proceedings of the 49th Hawaii International Conference on System Sciences (HICSS-49) (HICSS 2016), Jan. 2016, Grand Hyatt, Kauai.","category":"page"},{"location":"objective/#Objective","page":"Objective","title":"Objective","text":"","category":"section"},{"location":"objective/","page":"Objective","title":"Objective","text":"We provide the following methods to provide a compositional approach for defining common objectives used in joint gas-power models. These methods should always be defined over AbstractGasPowerModel.","category":"page"},{"location":"objective/","page":"Objective","title":"Objective","text":"Modules = [GasPowerModels]\nPages   = [\"core/objective.jl\"]\nOrder   = [:function]\nPrivate  = true","category":"page"},{"location":"objective/#GasPowerModels.objective_expression_ne_compressor_cost-Tuple{AbstractGasPowerModel}","page":"Objective","title":"GasPowerModels.objective_expression_ne_compressor_cost","text":"Helper function for expressing compressor costs.\n\n\n\n\n\n","category":"method"},{"location":"objective/#GasPowerModels.objective_expression_ne_line_cost-Tuple{AbstractGasPowerModel}","page":"Objective","title":"GasPowerModels.objective_expression_ne_line_cost","text":"Helper function for expressing line costs.\n\n\n\n\n\n","category":"method"},{"location":"objective/#GasPowerModels.objective_expression_ne_pipe_cost-Tuple{AbstractGasPowerModel}","page":"Objective","title":"GasPowerModels.objective_expression_ne_pipe_cost","text":"Helper function for expressing pipe costs.\n\n\n\n\n\n","category":"method"},{"location":"objective/#GasPowerModels.objective_expression_opf_cost-Tuple{AbstractGasPowerModel}","page":"Objective","title":"GasPowerModels.objective_expression_opf_cost","text":"Helper function for constructing the expression associated with the OPF objective.\n\n\n\n\n\n","category":"method"},{"location":"objective/#GasPowerModels.objective_expression_pressure_penalty-Tuple{AbstractGasPowerModel}","page":"Objective","title":"GasPowerModels.objective_expression_pressure_penalty","text":"Helper function for expressing zonal pressure penalty prices.\n\n\n\n\n\n","category":"method"},{"location":"objective/#GasPowerModels.objective_expression_zone_price-Tuple{AbstractGasPowerModel}","page":"Objective","title":"GasPowerModels.objective_expression_zone_price","text":"Helper function for expressing zonal prices.\n\n\n\n\n\n","category":"method"},{"location":"objective/#GasPowerModels.objective_max_gas_load-Tuple{AbstractGasPowerModel}","page":"Objective","title":"GasPowerModels.objective_max_gas_load","text":"Maximizes the normalized sum of nongeneration gas load delivered in the joint network, i.e.,\n\nmax eta_G(d) = left(sum_i in mathcalD^prime beta_i d_iright)\nleft(sum_i in mathcalD^prime beta_i overlined_iright)^-1\n\nwhere mathcalD^prime is the set the delivery points in the gas network with dispatchable demand that are not connected to interdependent generators in the power network, beta_i in mathbbR_+ (equal to the priority property of the delivery) is a predefined restoration priority for delivery i in mathcalD^prime, d_i is the mass flow of gas delivered at i in mathcalD^prime, and overlined_i is the maximum deliverable gas load at i in mathcalD^prime.\n\n\n\n\n\n","category":"method"},{"location":"objective/#GasPowerModels.objective_max_load-Tuple{AbstractGasPowerModel}","page":"Objective","title":"GasPowerModels.objective_max_load","text":"Maximizes the weighted normalized sums of nongeneration gas load and active power load delivered in the joint network, i.e.,\n\n    max lambda_G eta_G(d) + lambda_P eta_P(z^d)\n\nwhere it is recommended that 0  lambda_G  1, that gm_load_priority in the network data specification be set to the value of lambda_G desired, and that pm_load_priority similarly be set to the value 1 - lambda_G = lambda_P. This type of parameterization allows for a straightforward analysis of gas-power tradeoffs, as the objective is naturally scaled between zero and one.\n\n\n\n\n\n","category":"method"},{"location":"objective/#GasPowerModels.objective_max_power_load-Tuple{AbstractGasPowerModel}","page":"Objective","title":"GasPowerModels.objective_max_power_load","text":"Maximizes the normalized sum of active power load delivered in the joint network, i.e.,\n\nmax eta_P(z^d) = left(sum_i in mathcalL beta_i z_i^d\nlvert Re(S_i^d) rvert right) left(sum_i in\nmathcalL beta_i lvert Re(S_i^d) rvert right)^-1\n\nHere, mathcalL is the set of loads in the power network, beta_i in mathbbR_+ (equal to the weight property of the load) is the load restoration priority for load i in mathcalL, and z_i in 0 1 is a variable that scales the absolute maximum amount of active power load, lvert Re(S_i^d) rvert, at load i in mathcalL.\n\n\n\n\n\n","category":"method"},{"location":"objective/#GasPowerModels.objective_min_ne_cost-Tuple{AbstractGasPowerModel}","page":"Objective","title":"GasPowerModels.objective_min_ne_cost","text":"Objective for minimizing the costs of expansion. Formally stated as\n\nmin alpha sum_(ij) in Pipe cup Compressors kappa_ij z_ij +\nbeta sum_(ij) in Branches kappa_ij z_ij\n\nwhere alpha and beta are weighting terms.\n\n\n\n\n\n","category":"method"},{"location":"objective/#GasPowerModels.objective_min_ne_opf_cost-Tuple{AbstractGasPowerModel}","page":"Objective","title":"GasPowerModels.objective_min_ne_opf_cost","text":"Objective function for minimizing the gas-grid optimal flow combined with network expansion costs as defined in reference Russell Bent, Seth Blumsack, Pascal Van Hentenryck, Conrado Borraz-Sánchez, Mehdi Shahriari. Joint Electricity and Natural Gas Transmission Planning With Endogenous Market Feedbacks. IEEE Transactions on Power Systems. 33 (6): 6397-6409, 2018. More formally, this objective is stated as\n\nmin alpha sum_(ij) in Pipe cup Compressors kappa_ij z_ij +\nbeta sum_(ij) in Branches kappa_ij z_ij +\nlambda sum_g in G (c^1_g pg_g^2 + c^2_g pg_g + c^3_g) +\ngamma sum_z in Z cost_z + gamma sum_z in Z pc_z\n\nwhere lambda alpha beta and gamma are weighting terms.\n\n\n\n\n\n","category":"method"},{"location":"objective/#GasPowerModels.objective_min_opf_cost-Tuple{AbstractGasPowerModel}","page":"Objective","title":"GasPowerModels.objective_min_opf_cost","text":"Objective function for minimizing the gas-grid optimal flow as defined in reference Russell Bent, Seth Blumsack, Pascal Van Hentenryck, Conrado Borraz-Sánchez, Mehdi Shahriari. Joint Electricity and Natural Gas Transmission Planning With Endogenous Market Feedbacks. IEEE Transactions on Power Systems. 33 (6): 6397-6409, 2018. More formally, this objective is stated as\n\nmin lambda sum_g in G (c^1_g pg_g^2 + c^2_g pg_g + c^3_g) +\ngamma sum_z in Z cost_z + gamma sum_z in Z pc_z\n\nwhere lambda and gamma are weighting terms.\n\n\n\n\n\n","category":"method"},{"location":"#GasPowerModels.jl-Documentation","page":"Home","title":"GasPowerModels.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = GasPowerModels","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"GasPowerModels.jl is a Julia/JuMP package for the joint optimization of steady state natural gas and power transmission networks. It provides utilities for modeling problems that combine elements of natural gas and electric power systems. It is designed to enable the computational evaluation of historical and emerging gas-power network optimization formulations and algorithms using a common platform. The code is engineered to decouple Problem Specifications (e.g., gas-power flow, network expansion planning) from Network Formulations (e.g., mixed-integer convex, mixed-integer nonconvex). This decoupling enables the definition of a variety of optimization formulations and their comparison on common problem specifications.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The latest stable release of GasPowerModels can be installed using the Julia package manager with","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add GasPowerModels","category":"page"},{"location":"","page":"Home","title":"Home","text":"For the current development version, install the package using","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add GasPowerModels#master","category":"page"},{"location":"","page":"Home","title":"Home","text":"Finally, test that the package works as expected by executing","category":"page"},{"location":"","page":"Home","title":"Home","text":"] test GasPowerModels","category":"page"},{"location":"#Usage-at-a-Glance","page":"Home","title":"Usage at a Glance","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"At least one optimization solver is required to run GasPowerModels. The solver selected typically depends on the type of problem formulation being employed. As an example, the mixed-integer nonlinear programming solver Juniper can be used for testing any of the problem formulations considered in this package. Juniper itself depends on the installation of a nonlinear programming solver (e.g., Ipopt) and a mixed-integer linear programming solver (e.g., CBC). Installation of the JuMP interfaces to Juniper, Ipopt, and CBC can be performed via the Julia package manager, i.e.,","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add JuMP Juniper Ipopt Cbc","category":"page"},{"location":"","page":"Home","title":"Home","text":"After installation of the required solvers, an example gas-power flow feasibility problem (whose file inputs can be found in the test directory within the GasPowerModels repository) can be solved via","category":"page"},{"location":"","page":"Home","title":"Home","text":"using JuMP, Juniper, Ipopt, Cbc\nusing GasPowerModels\n\n# Set up the optimization solvers.\nipopt = JuMP.optimizer_with_attributes(Ipopt.Optimizer, \"print_level\" => 0, \"sb\" => \"yes\")\ncbc = JuMP.optimizer_with_attributes(Cbc.Optimizer, \"logLevel\" => 0)\njuniper = JuMP.optimizer_with_attributes(Juniper.Optimizer, \"nl_solver\" => ipopt, \"mip_solver\" => cbc)\n\n# Specify paths to the gas, power, and linking files.\ng_file = \"test/data/matgas/GasLib-11-GPF.m\" # Gas network.\np_file = \"test/data/matpower/case5-GPF.m\" # Power network.\nlink_file = \"test/data/json/GasLib-11-case5.json\" # Linking data.\n\n# Specify the gas-power formulation type.\ngpm_type = GasPowerModel{CRDWPGasModel, SOCWRPowerModel}\n\n# Solve the gas-power flow (gpf) feasibility problem.\nresult = run_gpf(g_file, p_file, link_file, gpm_type, juniper;\n    solution_processors = [GasPowerModels._GM.sol_psqr_to_p!,\n    GasPowerModels._PM.sol_data_model!])","category":"page"},{"location":"","page":"Home","title":"Home","text":"After solving the problem, results can then be analyzed, e.g.,","category":"page"},{"location":"","page":"Home","title":"Home","text":"# The termination status of the optimization solver.\nresult[\"termination_status\"]\n\n# Generator 1's active (real) power generation.\nresult[\"solution\"][\"it\"][\"pm\"][\"gen\"][\"1\"][\"pg\"]\n\n# Junction 1's pressure.\nresult[\"solution\"][\"it\"][\"gm\"][\"junction\"][\"1\"][\"p\"]","category":"page"}]
}
